{"version":3,"file":"forum.js","mappings":"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","sources":["webpack://@clarkwinkelmann/anonymous-posting/webpack/bootstrap","webpack://@clarkwinkelmann/anonymous-posting/webpack/runtime/compat get default export","webpack://@clarkwinkelmann/anonymous-posting/webpack/runtime/define property getters","webpack://@clarkwinkelmann/anonymous-posting/webpack/runtime/hasOwnProperty shorthand","webpack://@clarkwinkelmann/anonymous-posting/webpack/runtime/make namespace object","webpack://@clarkwinkelmann/anonymous-posting/./node_modules/@babel/runtime/helpers/esm/extends.js","webpack://@clarkwinkelmann/anonymous-posting/external root \"flarum.core.compat['forum/app']\"","webpack://@clarkwinkelmann/anonymous-posting/external root \"flarum.core.compat['common/extend']\"","webpack://@clarkwinkelmann/anonymous-posting/external root \"flarum.core.compat['common/utils/humanTime']\"","webpack://@clarkwinkelmann/anonymous-posting/external root \"flarum.core.compat['common/utils/extractText']\"","webpack://@clarkwinkelmann/anonymous-posting/external root \"flarum.core.compat['common/components/Button']\"","webpack://@clarkwinkelmann/anonymous-posting/external root \"flarum.core.compat['common/components/Link']\"","webpack://@clarkwinkelmann/anonymous-posting/external root \"flarum.core.compat['common/components/Switch']\"","webpack://@clarkwinkelmann/anonymous-posting/external root \"flarum.core.compat['common/components/Tooltip']\"","webpack://@clarkwinkelmann/anonymous-posting/external root \"flarum.core.compat['common/Model']\"","webpack://@clarkwinkelmann/anonymous-posting/external root \"flarum.core.compat['common/models/Post']\"","webpack://@clarkwinkelmann/anonymous-posting/external root \"flarum.core.compat['forum/utils/DiscussionControls']\"","webpack://@clarkwinkelmann/anonymous-posting/external root \"flarum.core.compat['forum/utils/PostControls']\"","webpack://@clarkwinkelmann/anonymous-posting/external root \"flarum.core.compat['forum/components/CommentPost']\"","webpack://@clarkwinkelmann/anonymous-posting/external root \"flarum.core.compat['forum/components/Composer']\"","webpack://@clarkwinkelmann/anonymous-posting/external root \"flarum.core.compat['forum/components/DiscussionComposer']\"","webpack://@clarkwinkelmann/anonymous-posting/external root \"flarum.core.compat['forum/components/ReplyComposer']\"","webpack://@clarkwinkelmann/anonymous-posting/external root \"flarum.core.compat['forum/components/PostUser']\"","webpack://@clarkwinkelmann/anonymous-posting/external root \"flarum.core.compat['forum/components/DiscussionListItem']\"","webpack://@clarkwinkelmann/anonymous-posting/./src/forum/index.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export default function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/app'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/extend'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/utils/humanTime'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/utils/extractText'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Button'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Link'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Switch'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Tooltip'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/Model'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/models/Post'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/utils/DiscussionControls'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/utils/PostControls'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/CommentPost'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/Composer'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/DiscussionComposer'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/ReplyComposer'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/PostUser'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/DiscussionListItem'];","import app from 'flarum/forum/app';\nimport {extend, override} from 'flarum/common/extend';\nimport humanTime from 'flarum/common/utils/humanTime';\nimport extractText from 'flarum/common/utils/extractText';\nimport ItemList from 'flarum/common/utils/ItemList';\nimport Button from 'flarum/common/components/Button';\nimport Link from 'flarum/common/components/Link';\nimport Switch from 'flarum/common/components/Switch';\nimport Tooltip from 'flarum/common/components/Tooltip';\nimport Model from 'flarum/common/Model';\nimport Discussion from 'flarum/common/models/Discussion';\nimport Post from 'flarum/common/models/Post';\nimport User from 'flarum/common/models/User';\nimport DiscussionControls from 'flarum/forum/utils/DiscussionControls';\nimport PostControls from 'flarum/forum/utils/PostControls';\nimport CommentPost from 'flarum/forum/components/CommentPost';\nimport Composer from 'flarum/forum/components/Composer';\nimport DiscussionComposer from 'flarum/forum/components/DiscussionComposer';\nimport ReplyComposer from 'flarum/forum/components/ReplyComposer';\nimport PostUser from 'flarum/forum/components/PostUser';\nimport DiscussionListItem from 'flarum/forum/components/DiscussionListItem';\n\nfunction extendComposerHeaderItems(this: DiscussionComposer | ReplyComposer, items: ItemList<any>) {\n    if (!app.forum.attribute('canAnonymousPost')) {\n        return;\n    }\n\n    items.add('anonymous-posting', Switch.component({\n        state: !!this.isAnonymous,\n        onchange: (value: boolean) => {\n            this.isAnonymous = value;\n        },\n    }, m('span.AnonymousCheckboxLabel', [\n        app.translator.trans('clarkwinkelmann-anonymous-posting.forum.composerControls.anonymize'),\n        m('.helpText', app.translator.trans('clarkwinkelmann-anonymous-posting.forum.composerControls.anonymizeHelp')),\n    ])), -10);\n}\n\nfunction extendComposerData(this: DiscussionComposer | ReplyComposer, data: any) {\n    if (this.isAnonymous) {\n        data.isAnonymous = true;\n    }\n}\n\nfunction anonymousAvatar(post: Discussion | Post, className: string = '') {\n    const src = post.attribute('anonymousAvatarUrl');\n\n    if (src) {\n        return m('img.Avatar.Avatar--anonymous' + className, {\n            src,\n            alt: app.translator.trans('clarkwinkelmann-anonymous-posting.lib.userMeta.username'),\n        });\n    }\n\n    return m('span.Avatar.Avatar--anonymous' + className, app.translator.trans('clarkwinkelmann-anonymous-posting.lib.userMeta.initials'));\n}\n\napp.initializers.add('anonymous-posting', () => {\n    extend(CommentPost.prototype, 'headerItems', function (items) {\n        // @ts-ignore\n        const post = this.attrs.post as Post;\n\n        if (!post.attribute('isAnonymous')) {\n            return;\n        }\n\n        items.setContent('user', m('.PostUser', m('h3', [\n            anonymousAvatar(post, '.PostUser-avatar'),\n            m('span.username', app.translator.trans('clarkwinkelmann-anonymous-posting.lib.userMeta.username')),\n        ])));\n\n        const anonymousUser = Model.hasOne<User>('anonymousUser').call(post);\n\n        if (!anonymousUser) {\n            return;\n        }\n\n        // Provide an altered post object that the PostUser component can read the user from\n        const alteredPost = new Post({\n            ...post.data,\n            relationships: {\n                ...post.data.relationships,\n                user: post.data.relationships!.anonymousUser,\n            },\n        });\n\n        items.add(\n            'anonymousUser',\n            PostUser.component({\n                post: alteredPost,\n                cardVisible: this.cardVisible,\n                oncardshow: () => {\n                    this.cardVisible = true;\n                    m.redraw();\n                },\n                oncardhide: () => {\n                    this.cardVisible = false;\n                    m.redraw();\n                },\n            }),\n            90 // Just after the original user label\n        );\n    });\n\n    extend(DiscussionListItem.prototype, 'view', function (vdom) {\n        // @ts-ignore\n        const discussion = this.attrs.discussion as Discussion;\n\n        if (!discussion.attribute('isAnonymous')) {\n            return;\n        }\n\n        vdom.children.forEach(vdom => {\n            if (!vdom || !vdom.attrs || !vdom.attrs.className || vdom.attrs.className.indexOf('DiscussionListItem-content') === -1) {\n                return;\n            }\n\n            vdom.children.forEach(vdom => {\n                if (!vdom || vdom.tag !== Tooltip) {\n                    return;\n                }\n\n                vdom.attrs.text = app.translator.trans('core.forum.discussion_list.started_text', {\n                    username: app.translator.trans('clarkwinkelmann-anonymous-posting.lib.userMeta.username'),\n                    ago: humanTime(discussion.createdAt()),\n                });\n\n                vdom.children.forEach(vdom => {\n                    if (!vdom || vdom.tag !== Link) {\n                        return;\n                    }\n\n                    vdom.children = [\n                        anonymousAvatar(discussion),\n                    ];\n                });\n            });\n        });\n    });\n\n    extend(CommentPost.prototype, 'oninit', function () {\n        this.subtree!.check(() => {\n            // @ts-ignore\n            const post = this.attrs.post as Post;\n            return post.attribute('isAnonymous');\n        });\n    });\n\n    extend(DiscussionComposer.prototype, 'headerItems', extendComposerHeaderItems);\n    extend(DiscussionComposer.prototype, 'data', extendComposerData);\n    extend(ReplyComposer.prototype, 'headerItems', extendComposerHeaderItems);\n    extend(ReplyComposer.prototype, 'data', extendComposerData);\n\n    extend(DiscussionControls, 'moderationControls', function (items, discussion) {\n        if (discussion.attribute('canDeAnonymize')) {\n            items.add('deanonymize', Button.component({\n                icon: 'fas fa-user-secret',\n                onclick: () => {\n                    if (!confirm(extractText(app.translator.trans('clarkwinkelmann-anonymous-posting.forum.discussionControls.deanonymizeConfirmation')))) {\n                        return;\n                    }\n\n                    discussion.save({\n                        isAnonymous: false,\n                    }).then(() => {\n                        m.redraw();\n                    });\n                },\n            }, app.translator.trans('clarkwinkelmann-anonymous-posting.forum.discussionControls.deanonymize')));\n        }\n\n        if (discussion.attribute('canAnonymize')) {\n            items.add('anonymize', Button.component({\n                icon: 'fas fa-user-secret',\n                onclick: () => {\n                    if (!confirm(extractText(app.translator.trans('clarkwinkelmann-anonymous-posting.forum.discussionControls.anonymizeConfirmation')))) {\n                        return;\n                    }\n\n                    discussion.save({\n                        isAnonymous: true,\n                    }).then(() => {\n                        m.redraw();\n                    });\n                },\n            }, app.translator.trans('clarkwinkelmann-anonymous-posting.forum.discussionControls.anonymize')));\n        }\n    });\n\n    extend(PostControls, 'moderationControls', function (items, post) {\n        if (post.attribute('canDeAnonymize')) {\n            items.add('deanonymize', Button.component({\n                icon: 'fas fa-user-secret',\n                onclick: () => {\n                    if (!confirm(extractText(app.translator.trans('clarkwinkelmann-anonymous-posting.forum.postControls.deanonymizeConfirmation')))) {\n                        return;\n                    }\n\n                    post.save({\n                        isAnonymous: false,\n                    }).then(() => {\n                        m.redraw();\n                    });\n                },\n            }, app.translator.trans('clarkwinkelmann-anonymous-posting.forum.postControls.deanonymize')));\n        }\n\n        if (post.attribute('canAnonymize')) {\n            items.add('anonymize', Button.component({\n                icon: 'fas fa-user-secret',\n                onclick: () => {\n                    if (post.number() === 1) {\n                        if (!confirm(extractText(app.translator.trans('clarkwinkelmann-anonymous-posting.forum.postControls.firstPostConfirmation')))) {\n                            return;\n                        }\n                    }\n\n                    post.save({\n                        isAnonymous: true,\n                    }).then(() => {\n                        m.redraw();\n                    });\n                },\n            }, app.translator.trans('clarkwinkelmann-anonymous-posting.forum.postControls.anonymize')));\n        }\n    });\n\n    // Flarum will try to focus the checkbox in ReplyComposer instead of the body. To work around this, we'll temporarily disable the field while this method runs\n    override(Composer.prototype, 'focus', function (original) {\n        const $anonymousCheckbox = this.$('.item-anonymous-posting input');\n\n        $anonymousCheckbox.prop('disabled', true);\n\n        const returnValue = original();\n\n        $anonymousCheckbox.prop('disabled', false);\n\n        return returnValue;\n    });\n});\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","_extends","assign","target","i","arguments","length","source","apply","this","flarum","core","compat","extendComposerHeaderItems","items","app","add","Switch","state","isAnonymous","onchange","m","extendComposerData","data","anonymousAvatar","post","className","src","attribute","alt","extend","CommentPost","attrs","setContent","Model","alteredPost","Post","relationships","user","anonymousUser","PostUser","cardVisible","oncardshow","redraw","oncardhide","DiscussionListItem","vdom","discussion","children","forEach","indexOf","tag","Tooltip","text","username","ago","humanTime","createdAt","Link","subtree","check","DiscussionComposer","ReplyComposer","DiscussionControls","Button","icon","onclick","confirm","extractText","save","then","PostControls","number","override","Composer","original","$anonymousCheckbox","$","returnValue"],"sourceRoot":""}